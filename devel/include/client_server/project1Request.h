// Generated by gencpp from file client_server/project1Request.msg
// DO NOT EDIT!


#ifndef CLIENT_SERVER_MESSAGE_PROJECT1REQUEST_H
#define CLIENT_SERVER_MESSAGE_PROJECT1REQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace client_server
{
template <class ContainerAllocator>
struct project1Request_
{
  typedef project1Request_<ContainerAllocator> Type;

  project1Request_()
    : temp(0)
    , hum(0)
    , pre(0)  {
    }
  project1Request_(const ContainerAllocator& _alloc)
    : temp(0)
    , hum(0)
    , pre(0)  {
  (void)_alloc;
    }



   typedef int32_t _temp_type;
  _temp_type temp;

   typedef int32_t _hum_type;
  _hum_type hum;

   typedef int32_t _pre_type;
  _pre_type pre;





  typedef boost::shared_ptr< ::client_server::project1Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::client_server::project1Request_<ContainerAllocator> const> ConstPtr;

}; // struct project1Request_

typedef ::client_server::project1Request_<std::allocator<void> > project1Request;

typedef boost::shared_ptr< ::client_server::project1Request > project1RequestPtr;
typedef boost::shared_ptr< ::client_server::project1Request const> project1RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::client_server::project1Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::client_server::project1Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::client_server::project1Request_<ContainerAllocator1> & lhs, const ::client_server::project1Request_<ContainerAllocator2> & rhs)
{
  return lhs.temp == rhs.temp &&
    lhs.hum == rhs.hum &&
    lhs.pre == rhs.pre;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::client_server::project1Request_<ContainerAllocator1> & lhs, const ::client_server::project1Request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace client_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::client_server::project1Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::client_server::project1Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::client_server::project1Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::client_server::project1Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::client_server::project1Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::client_server::project1Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::client_server::project1Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0ce2e252884b3c190fc892c0225083d";
  }

  static const char* value(const ::client_server::project1Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0ce2e252884b3c1ULL;
  static const uint64_t static_value2 = 0x90fc892c0225083dULL;
};

template<class ContainerAllocator>
struct DataType< ::client_server::project1Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "client_server/project1Request";
  }

  static const char* value(const ::client_server::project1Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::client_server::project1Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 temp\n"
"int32 hum\n"
"int32 pre\n"
;
  }

  static const char* value(const ::client_server::project1Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::client_server::project1Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temp);
      stream.next(m.hum);
      stream.next(m.pre);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct project1Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::client_server::project1Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::client_server::project1Request_<ContainerAllocator>& v)
  {
    s << indent << "temp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.temp);
    s << indent << "hum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hum);
    s << indent << "pre: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pre);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLIENT_SERVER_MESSAGE_PROJECT1REQUEST_H
